<Include("Claim")/>
=>Writen by Riceball LEE>=

Summary: here is the simple execution efficiency test of the script engine - EUPHORIA, Lua, TurboScript, paxCompiler


== Introduction ==

The main disadvantage of interpreters is that when a program is interpreted, it runs slower than if it had been compiled.
Interpreting code is slower than running the compiled code because the interpreter must analyze each bytecode in the program each time it is executed and then perform the desired action whereas the compiled code just performs the action. This run-time analysis is known as "interpretive overhead".

To measure execution efficiency of the script engine, for the interpreter(non-JITter) script, the crucial key is the interpretive overhead.
The improvement of the interpreters execution efficiency is to reduce the interpretive overhead more and more.
here we treat the "interpretive overhead" of the compiled execution as 0, and compare with the execution efficiency of the interpreter.
we use the Add arithmatic instruction to test for most script engines have no the NOOP instruction.


== The Execution Efficiency Chart ==

treat the x86 ASM Execution Efficiency as 100%.

  ScriptPerformance.gif
  [[Image:./ScriptPerformance-3.gif|thumb|none|95%|]]


== Execution Efficiency ==

=== x86 ASM Execution Efficiency ===

the integer add instruction test:

<code>
  ;begin test
  MOV EBX, 300  BB2C010000
  ADD EBX, 300  81C32C010000
  ..... --- Total 2017 Count
  ADD EBX, 300  81C32C010000
  ;end test
</code>
 
QueryPerformanceCount: 54; treat the Execution Efficiency is 100%;  interpretive overhead is 0%

the float add instruction test:

<code>
  ;begin test
  a := 300.00000;
  b := 300.00000;
  asm 
    FLD a   //push a to st(0)
    FADD b
  ..... --- Total 2017 Count
    FADD b
    FSTP a
  end;//}
  ;计时结束
</code>
 
QueryPerformanceCount: 67; treat the Execution Efficiency is 100%;  interpretive overhead is 0%

=== Lua Script ===
<code>
  (begin test)
  local count = 300
  count = count + 300
  ..... --- Total 2017 Count
  count = count + 300
  (end test)
</code>

Lua script no native integer, all number are float number, so compare with x86 float add instruction.

[Lua5.0.2] QueryPerformanceCount: 110; Execution Efficiency is 61%; interpretive overhead is 39%
[Lua5.1 ] QueryPerformanceCount: 120;  Execution Efficiency is 56%; interpretive overhead is 44%


=== EUPHORIA  ===
<code>
  --begin test
    count = 300
    count +=300
  ..... --- Total 2017 Count
    count +=300
  --end test
</code>
 
QueryPerformanceCount: 74; treat the Execution Efficiency is 73%;  interpretive overhead is 27%

=== paxCompiler  ===
<code>
  //time begin
  Result := 300;
  Result := Result + 300;
  ..... --- Total 2017 Count
  Result := Result + 300;
  //time end
</code>
 
QueryPerformanceCount: 286; treat the Execution Efficiency is 19%;  interpretive overhead is 81%


=== TurboScript ===
<code>
  //time begin
  300  //Push 300 to the data stack.
  300 +
  ..... --- Total 2017 Count
  300 +
  //time end
</code>
 
QueryPerformanceCount: 83; treat the Execution Efficiency is 65%;  interpretive overhead is 35%
PurePascalEngine QueryPerformanceCount: 153
PurePascalEngine(FPC) QueryPerformanceCount: 469

== Call subroutine Execution Efficiency ==

=== x86 Asm Call Subroutine ===
<code>
function add(const a,b: integer): integer;
asm
  mov EAX, a
  add EAX, b
end;
  //time begin
  asm
    mOV EAX, 300
    MOV EDX, 300    CALL ADD
  ..... --- Total 2017 Count
    MOV EDX, 300    CALL ADD
  //time end
</code>

QueryPerformanceCount: 126; treat the Execution Efficiency is 100%;  interpretive overhead is 0%

<code>
function add: double;
asm
  Fadd b
end;

  //time begin
  a := 300.00001;
  b := 300.00001;
  asm 
    FLD a
    CALL ADD
  ..... --- Total 2017 Count
    CALL ADD
    FSTP a
  //time end
</code>

QueryPerformanceCount: 76; treat the Execution Efficiency is 100%;  interpretive overhead is 0%

=== Lua Call Subroutine  ===
<code>
function iAdd(a, b)
  return a+b
end function
  (time begin)
  local count = 300
  count = iAdd(count, 300)
  ..... --- Total 2017 Count
  count = iAdd(count, 300)
  (time end)
</code>

[Lua5.0.2] QueryPerformanceCount: 1270; the Execution Efficiency is 10%;  interpretive overhead is 90%
[Lua5.1 ]  QueryPerformanceCount: 1710; the Execution Efficiency is 7%;  interpretive overhead is 93%


=== EUPHORIA Call Subroutine ===
<code>
function iAdd(integer a, integer b)
  return a+b
end function
--begin test
count = 300
count = iAdd(count, 300)
  ..... --- Total 2017 Count
count = iAdd(count, 300)
--end test
</code>
 
QueryPerformanceCount: 522; Execution Efficiency is 23%;  interpretive overhead is 77%

=== paxCompiler Call Subroutine ===
<code>
function Add(const a,b: integer): integer;
begin
  Result := a + b;
end;

  //test begin
  Result := 300;
  Result := Add(Result, 300);
  ..... --- Total 2017 Count
  Result := Add(Result, 300);
  //test end
</code>
 
QueryPerformanceCount: 410; Execution Efficiency is 29%;  interpretive overhead is 71%

=== TurboScript Call Subroutine ===
<code>
: Add +;
//--time begin
300
300 Add
  ..... --- Total 2017 Count
300 Add
//--time end
</code>

QueryPerformanceCount: 164; Execution Efficiency is 73%;  interpretive overhead is 27%
PurePascalEngine QueryPerformanceCount: 310
PurePascalEngine(FPC) QueryPerformanceCount: 963

=== TurboScript Far Call Subroutine with another TurboModule file  ===
<code>
: Add external 'test'; // the add function in anther 'test.tpc' file.
//--time begin
300
300 Add
  ..... --- Total 2017 Count
300 Add
//--time end
</code>

Preloding QueryPerformanceCount: 191
Load-On-Demand QueryPerformanceCount: 1082[1082-8828];

PurePascalEngine Preloding QueryPerformanceCount: 423
PurePascalEngine (FPC) Preloding QueryPerformanceCount: 1517

=== TurboScript Call Subroutine in DLL  ===
<code>
//this function in the DLL file:  'dlltest.dll'
:Add(const a: Integer; const b: Integer): Integer 
  external 'dlltest.dll' DLL REGISTER Name 'AddCalc';

//--time begin
300
300 Add
  ..... --- Total 2017 Count
300 Add
//--time end
</code>

Load-On-Demand QueryPerformanceCount: 16648-17100;
Preloding QueryPerformanceCount: 5003-5520;


== WebSites ==
 * Lua: http://www.lua.org
 * EUPHORIA: http://www.rapideuphoria.com
 * paxCompiler: http://www.paxcompiler.com
 * TurboScript: UnderContruction.
 
== the script engine and test script download ==
